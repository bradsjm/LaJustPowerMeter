// <copyright file="OpCodes.cs" company="LaJust Sports America">
// Copyright (c) 2010 All Rights Reserved.
// </copyright>
// <author>Jonathan Bradshaw</author>
// <email>jonathan.bradshaw@lajustsports.com</email>

namespace LaJust.EIDSS.Communications.Entities
{
    #region Public Enumerations

    /// <summary>
    /// Receiver Operation Command Codes (sent to receiver)
    /// </summary>
    public enum OpCodeCmds : byte
    {
        // EIDSS 2.0 and 3.0 op codes

        /// <summary>
        /// Register Chung
        /// </summary>
        RegisterChung = 0x21,

        /// <summary>
        /// Register Hong
        /// </summary>
        RegisterHong = 0x41,

        /// <summary>
        /// Generate Speaker Tone
        /// </summary>
        GenerateTone = 0x91,

        /// <summary>
        /// Send acknowledgement of packet (to receiver)
        /// </summary>
        Acknowledgement = 0xAC,

        // EIDSS 3.0 receiver uses these op codes, not available in EIDSS 2.0

        /// <summary>
        /// Register Target
        /// </summary>
        RegisterTarget = 0x33,

        /// <summary>
        /// Pre-Register Chung
        /// </summary>
        PreRegisterChung = 0x51,

        /// <summary>
        /// Pre-Register Hong
        /// </summary>
        PreRegisterHong = 0x52
    }

    /// <summary>
    /// Defines the operation codes (received from the receiver)
    /// </summary>
    public enum OpCodes : byte
    {
        /// <summary>
        /// Not a valid op code
        /// </summary>
        Invalid = 0x00,

        // EIDSS 2.0 and 3.0 op codes

        /// <summary>
        /// Chung Registered
        /// </summary>
        ChungRegistered = 0x63,

        /// <summary>
        /// Hong Registered
        /// </summary>
        HongRegistered = 0x65,

        /// <summary>
        /// Panel Button Pressed
        /// </summary>
        PanelButtonPressed = 0x90,

        // EIDSS 2.0 receiver uses these op codes, not used in EIDSS 3.0

        /// <summary>
        /// Hong Not Responding (v1 receiver only)
        /// </summary>
        HongNotResponding = 0xA1,

        /// <summary>
        /// Chung Not Responding (v1 receiver only)
        /// </summary>
        ChungNotResponding = 0xA2,

        /// <summary>
        /// Hong Data (v1 receiver only)
        /// </summary>
        HongDataV1 = 0xA5,

        /// <summary>
        /// Chung Data (v1 receiver only)
        /// </summary>
        ChungDataV1 = 0xA6,

        // EIDSS 3.0 receiver uses these op codes, not available in EIDSS 2.0

        /// <summary>
        /// Target Data Received (v2 receiver)
        /// </summary>
        TargetRegistered = 0x53,

        /// <summary>
        /// Target Data Received (v2 receiver)
        /// </summary>
        TargetDataV2 = 0xA8,

        /// <summary>
        /// Hong Data Received (v2 receiver)
        /// </summary>
        HongDataV2 = 0xB5,

        /// <summary>
        /// Chung Data Received (v2 receiver)
        /// </summary>
        ChungDataV2 = 0xB6,

        /// <summary>
        /// Chung Pre-Registered
        /// </summary>
        ChungPreRegistered = 0x61,

        /// <summary>
        /// Hong Pre-Registered
        /// </summary>
        HongPreRegistered = 0x68
    }

    /// <summary>
    /// Defines the sensor contact mode byte type
    /// </summary>
    public enum TouchSensorStatusEnum : byte
    {
        /// <summary>
        /// Not a valid op code
        /// </summary>
        Invalid = 0x00,

        /// <summary>
        /// Touch Sensor Required for Hit
        /// </summary>
        Required = 0x01,

        /// <summary>
        /// Touch Sensor Not Required for Hit
        /// </summary>
        NotRequired = 0x02
    }

    /// <summary>
    /// Defines the tones generated by the receiver
    /// </summary>
    public enum ToneTypeEnum : byte
    {
        /// <summary>
        /// Start Round
        /// </summary>
        StartRound = 0x01,

        /// <summary>
        /// End of Round
        /// </summary>
        EndRound = 0x02,

        /// <summary>
        /// Warning Tone
        /// </summary>
        Warning = 0x03
    }

    /// <summary>
    /// Defines the sensor contact mode byte type.
    /// 0x80 indicates top contact sock sensor, 0x8 indicates bottom sock contact sensor
    /// AND value with 0x77 to remove sock sensor bit
    /// </summary>
    public enum WetBagPanelEnum : byte
    {
        /// <summary>
        /// Unknown Panel (or no panel on device)
        /// </summary>
        Unknown = 0,

        /// <summary>
        /// Top Left Panel
        /// </summary>
        TopLeft = 0x60,                     // 0110 0000

        /// <summary>
        /// Top Middle Panel
        /// </summary>
        TopMiddle = 0x50,                   // 0101 0000

        /// <summary>
        /// Top Right Panel
        /// </summary>
        TopRight = 0x40,                    // 0100 0000

        /// <summary>
        /// Bottom Left Panel
        /// </summary>
        BottomLeft = 0x03,                  // 0000 0011

        /// <summary>
        /// Bottom Middle Panel
        /// </summary>
        BottomMiddle = 0x02,                // 0000 0010

        /// <summary>
        /// Bottom Right Panel
        /// </summary>
        BottomRight = 0x01,                 // 0000 0001

        ////With sock sensor
        ////TouchTopLeft = 0xE0,              // 1110 0000
        ////TouchTopMiddle = 0xD0,            // 1101 0000
        ////TouchTopRight = 0xC0,             // 1100 0000
        ////TouchBottomLeft = 0xB,            // 0000 1011
        ////TouchBottomMiddle = 0xA,          // 0000 1010
        ////TouchBottomRight = 0x9            // 0000 1001
    }

    /// <summary>
    /// Status Code Definitions
    /// </summary>
    public enum DeviceStatusEnum : byte
    {
        /// <summary>
        /// Not a valid status field
        /// </summary>
        Invalid = 0x00,

        /// <summary>
        /// Unknown status generated by hogu when operating normally
        /// </summary>
        HoguOk = 0x08,

        /// <summary>
        /// Status generated when low battery detected
        /// </summary>
        LowBattery = 0x09,

        /// <summary>
        /// Status generated when device communications are lost
        /// </summary>
        NotResponding = 0x0C,

        /// <summary>
        /// Unknown status generated by targets when operating normally
        /// </summary>
        TargetOk = 0x88
    }
    #endregion

    #region Public Enumerations

    /// <summary>
    /// Byte map for registration response data fields
    /// Example: 00-63-00-51-0A-02-13-16-00-00
    /// </summary>
    public enum RegistrationDataFields
    {
        /// <summary>
        /// Game Number
        /// </summary>
        GameNumber = 0,

        /// <summary>
        /// Operation Code
        /// </summary>
        OpCode = 1,

        /// <summary>
        /// Court Number
        /// </summary>
        CourtNumber = 2,

        /// <summary>
        /// Registration Sequence
        /// </summary>
        RegSequence = 3,

        /// <summary>
        /// Minimum Impact Required
        /// </summary>
        MinimumImpact = 4,

        /// <summary>
        /// Touch Sensor Mode
        /// </summary>
        TouchSensorMode = 5,

        /// <summary>
        /// Device Id Byte 1
        /// </summary>
        Id1 = 6,

        /// <summary>
        /// Device Id Byte 2
        /// </summary>
        Id2 = 7,

        /// <summary>
        /// Device Id Byte 3
        /// </summary>
        Id3 = 8
    }

    /// <summary>
    /// Byte map for strike data fields from version 1 receivers
    /// Example: 00-A6-46-2B-00-00-08-06
    /// </summary>
    public enum HoguDataFieldsV1
    {
        /// <summary>
        /// Game Number
        /// </summary>
        GameNumber = 0,

        /// <summary>
        /// Operation Code
        /// </summary>
        OpCode = 1,

        /// <summary>
        /// Registration Sequence
        /// </summary>
        RegSequence = 2,

        /// <summary>
        /// Vest Hit Impact Value
        /// </summary>
        VestHitValue = 3,

        /// <summary>
        /// Head Hit Impact Value
        /// </summary>
        HeadHitValue = 4,

        /// <summary>
        /// Touch Sensor Status
        /// </summary>
        TouchStatus = 5,

        /// <summary>
        /// Hogu Status
        /// </summary>
        HoguStatus = 6,

        /// <summary>
        /// Packet Sequence Number
        /// </summary>
        SequenceNumber = 7
    }

    /// <summary>
    /// Byte map for strike data fields from version 2 receivers
    /// Example: 00-B6-46-2B-00-00-08-13-16-00-06
    /// </summary>
    public enum HoguDataFieldsV2
    {
        /// <summary>
        /// Game Number
        /// </summary>
        GameNumber = 0,

        /// <summary>
        /// Operation Code
        /// </summary>
        OpCode = 1,

        /// <summary>
        /// Registration Sequence
        /// </summary>
        RegSequence = 2,

        /// <summary>
        /// Vest Hit Impact Level
        /// </summary>
        VestHitValue = 3,

        /// <summary>
        /// Head Hit Impact Level
        /// </summary>
        HeadHitValue = 4,

        /// <summary>
        /// Touch Sensor Status
        /// </summary>
        TouchStatus = 5,

        /// <summary>
        /// Hogu Status
        /// </summary>
        HoguStatus = 6,

        /// <summary>
        /// Device Id Byte 1
        /// </summary>
        ID1 = 7,

        /// <summary>
        /// Device Id Byte 2
        /// </summary>
        ID2 = 8,

        /// <summary>
        /// Device Id Byte 3
        /// </summary>
        ID3 = 9,

        /// <summary>
        /// Packet Sequence Number
        /// </summary>
        SequenceNumber = 10
    }

    /// <summary>
    /// Byte map for the target data fields from version 2 receivers (not supported on V1)
    /// Example: 04-A8-A0-00-00-00-0C-CF-29-00-00-01-02
    /// </summary>
    public enum TargetDataFieldsV2
    {
        /// <summary>
        /// Game Number
        /// </summary>
        GameNumber = 0,

        /// <summary>
        /// Operation Code
        /// </summary>
        OpCode = 1,

        /// <summary>
        /// Registration Sequence
        /// </summary>
        RegSequence = 2,

        /// <summary>
        /// Vest Impact Hit Value
        /// </summary>
        VestHitValue = 3,

        /// <summary>
        /// Head Impact Hit Value
        /// </summary>
        HeadHitValue = 4,

        /// <summary>
        /// Panel Number
        /// </summary>
        TargetPanel = 5,

        /// <summary>
        /// Target Status
        /// </summary>
        TargetStatus = 6,

        /// <summary>
        /// Target Id Byte 1
        /// </summary>
        ID1 = 7,

        /// <summary>
        /// Target Id Byte 2
        /// </summary>
        ID2 = 8,

        /// <summary>
        /// Target Id Byte 3
        /// </summary>
        ID3 = 9,

        /// <summary>
        /// Target Number
        /// </summary>
        TargetNumber = 10,

        /// <summary>
        /// Total Targets Registered
        /// </summary>
        TargetTotal = 11,

        /// <summary>
        /// Packet Sequence Number
        /// </summary>
        SequenceNumber = 12
    }

    #endregion
}
