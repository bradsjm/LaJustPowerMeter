//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Graphing.Entities
{
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataLogModel")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataLogModel : global::System.Data.DataSet {
        
        private ImpactsDataTable tableImpacts;
        
        private ScoresDataTable tableScores;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataLogModel() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataLogModel(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Impacts"] != null)) {
                    base.Tables.Add(new ImpactsDataTable(ds.Tables["Impacts"]));
                }
                if ((ds.Tables["Scores"] != null)) {
                    base.Tables.Add(new ScoresDataTable(ds.Tables["Scores"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ImpactsDataTable Impacts {
            get {
                return this.tableImpacts;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScoresDataTable Scores {
            get {
                return this.tableScores;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataLogModel cln = ((DataLogModel)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Impacts"] != null)) {
                    base.Tables.Add(new ImpactsDataTable(ds.Tables["Impacts"]));
                }
                if ((ds.Tables["Scores"] != null)) {
                    base.Tables.Add(new ScoresDataTable(ds.Tables["Scores"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableImpacts = ((ImpactsDataTable)(base.Tables["Impacts"]));
            if ((initTable == true)) {
                if ((this.tableImpacts != null)) {
                    this.tableImpacts.InitVars();
                }
            }
            this.tableScores = ((ScoresDataTable)(base.Tables["Scores"]));
            if ((initTable == true)) {
                if ((this.tableScores != null)) {
                    this.tableScores.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataLogModel";
            this.Prefix = "";
            this.Namespace = "uri://lajust.net/DataLogModel.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableImpacts = new ImpactsDataTable();
            base.Tables.Add(this.tableImpacts);
            this.tableScores = new ScoresDataTable();
            base.Tables.Add(this.tableScores);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeImpacts() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScores() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataLogModel ds = new DataLogModel();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ImpactsRowChangeEventHandler(object sender, ImpactsRowChangeEvent e);
        
        public delegate void ScoresRowChangeEventHandler(object sender, ScoresRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ImpactsDataTable : global::System.Data.TypedTableBase<ImpactsRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnTimestamp;
            
            private global::System.Data.DataColumn columnSensorId;
            
            private global::System.Data.DataColumn columnGameNumber;
            
            private global::System.Data.DataColumn columnRoundNumber;
            
            private global::System.Data.DataColumn columnElapsedTime;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDataSource;
            
            private global::System.Data.DataColumn columnRequiredLevel;
            
            private global::System.Data.DataColumn columnImpactLevel;
            
            private global::System.Data.DataColumn columnSensorPanel;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImpactsDataTable() {
                this.TableName = "Impacts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImpactsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ImpactsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimestampColumn {
                get {
                    return this.columnTimestamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SensorIdColumn {
                get {
                    return this.columnSensorId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GameNumberColumn {
                get {
                    return this.columnGameNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RoundNumberColumn {
                get {
                    return this.columnRoundNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ElapsedTimeColumn {
                get {
                    return this.columnElapsedTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataSourceColumn {
                get {
                    return this.columnDataSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequiredLevelColumn {
                get {
                    return this.columnRequiredLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpactLevelColumn {
                get {
                    return this.columnImpactLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SensorPanelColumn {
                get {
                    return this.columnSensorPanel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImpactsRow this[int index] {
                get {
                    return ((ImpactsRow)(this.Rows[index]));
                }
            }
            
            public event ImpactsRowChangeEventHandler ImpactsRowChanging;
            
            public event ImpactsRowChangeEventHandler ImpactsRowChanged;
            
            public event ImpactsRowChangeEventHandler ImpactsRowDeleting;
            
            public event ImpactsRowChangeEventHandler ImpactsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddImpactsRow(ImpactsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImpactsRow AddImpactsRow(System.DateTime Timestamp, string SensorId, byte GameNumber, byte RoundNumber, System.TimeSpan ElapsedTime, string Name, string DataSource, byte RequiredLevel, byte ImpactLevel, string SensorPanel) {
                ImpactsRow rowImpactsRow = ((ImpactsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Timestamp,
                        SensorId,
                        GameNumber,
                        RoundNumber,
                        ElapsedTime,
                        Name,
                        DataSource,
                        RequiredLevel,
                        ImpactLevel,
                        SensorPanel};
                rowImpactsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowImpactsRow);
                return rowImpactsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImpactsRow FindByID(int ID) {
                return ((ImpactsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ImpactsDataTable cln = ((ImpactsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ImpactsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTimestamp = base.Columns["Timestamp"];
                this.columnSensorId = base.Columns["SensorId"];
                this.columnGameNumber = base.Columns["GameNumber"];
                this.columnRoundNumber = base.Columns["RoundNumber"];
                this.columnElapsedTime = base.Columns["ElapsedTime"];
                this.columnName = base.Columns["Name"];
                this.columnDataSource = base.Columns["DataSource"];
                this.columnRequiredLevel = base.Columns["RequiredLevel"];
                this.columnImpactLevel = base.Columns["ImpactLevel"];
                this.columnSensorPanel = base.Columns["SensorPanel"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTimestamp = new global::System.Data.DataColumn("Timestamp", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimestamp);
                this.columnSensorId = new global::System.Data.DataColumn("SensorId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSensorId);
                this.columnGameNumber = new global::System.Data.DataColumn("GameNumber", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGameNumber);
                this.columnRoundNumber = new global::System.Data.DataColumn("RoundNumber", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoundNumber);
                this.columnElapsedTime = new global::System.Data.DataColumn("ElapsedTime", typeof(global::System.TimeSpan), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnElapsedTime);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDataSource = new global::System.Data.DataColumn("DataSource", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataSource);
                this.columnRequiredLevel = new global::System.Data.DataColumn("RequiredLevel", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequiredLevel);
                this.columnImpactLevel = new global::System.Data.DataColumn("ImpactLevel", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpactLevel);
                this.columnSensorPanel = new global::System.Data.DataColumn("SensorPanel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSensorPanel);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnTimestamp.AllowDBNull = false;
                this.columnSensorId.AllowDBNull = false;
                this.columnGameNumber.AllowDBNull = false;
                this.columnRoundNumber.AllowDBNull = false;
                this.columnElapsedTime.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnDataSource.AllowDBNull = false;
                this.columnRequiredLevel.AllowDBNull = false;
                this.columnImpactLevel.AllowDBNull = false;
                this.columnSensorPanel.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImpactsRow NewImpactsRow() {
                return ((ImpactsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ImpactsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ImpactsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ImpactsRowChanged != null)) {
                    this.ImpactsRowChanged(this, new ImpactsRowChangeEvent(((ImpactsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ImpactsRowChanging != null)) {
                    this.ImpactsRowChanging(this, new ImpactsRowChangeEvent(((ImpactsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ImpactsRowDeleted != null)) {
                    this.ImpactsRowDeleted(this, new ImpactsRowChangeEvent(((ImpactsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ImpactsRowDeleting != null)) {
                    this.ImpactsRowDeleting(this, new ImpactsRowChangeEvent(((ImpactsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveImpactsRow(ImpactsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataLogModel ds = new DataLogModel();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ImpactsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScoresDataTable : global::System.Data.TypedTableBase<ScoresRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnTimestamp;
            
            private global::System.Data.DataColumn columnSensorId;
            
            private global::System.Data.DataColumn columnGameNumber;
            
            private global::System.Data.DataColumn columnRoundNumber;
            
            private global::System.Data.DataColumn columnElapsedTime;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRequiredLevel;
            
            private global::System.Data.DataColumn columnImpactLevel;
            
            private global::System.Data.DataColumn columnPoints;
            
            private global::System.Data.DataColumn columnNewScore;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScoresDataTable() {
                this.TableName = "Scores";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScoresDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ScoresDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimestampColumn {
                get {
                    return this.columnTimestamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SensorIdColumn {
                get {
                    return this.columnSensorId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GameNumberColumn {
                get {
                    return this.columnGameNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RoundNumberColumn {
                get {
                    return this.columnRoundNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ElapsedTimeColumn {
                get {
                    return this.columnElapsedTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequiredLevelColumn {
                get {
                    return this.columnRequiredLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpactLevelColumn {
                get {
                    return this.columnImpactLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PointsColumn {
                get {
                    return this.columnPoints;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewScoreColumn {
                get {
                    return this.columnNewScore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScoresRow this[int index] {
                get {
                    return ((ScoresRow)(this.Rows[index]));
                }
            }
            
            public event ScoresRowChangeEventHandler ScoresRowChanging;
            
            public event ScoresRowChangeEventHandler ScoresRowChanged;
            
            public event ScoresRowChangeEventHandler ScoresRowDeleting;
            
            public event ScoresRowChangeEventHandler ScoresRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScoresRow(ScoresRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScoresRow AddScoresRow(System.DateTime Timestamp, string SensorId, byte GameNumber, byte RoundNumber, System.TimeSpan ElapsedTime, string Name, byte RequiredLevel, byte ImpactLevel, int Points, uint NewScore) {
                ScoresRow rowScoresRow = ((ScoresRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Timestamp,
                        SensorId,
                        GameNumber,
                        RoundNumber,
                        ElapsedTime,
                        Name,
                        RequiredLevel,
                        ImpactLevel,
                        Points,
                        NewScore};
                rowScoresRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScoresRow);
                return rowScoresRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScoresRow FindByID(int ID) {
                return ((ScoresRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ScoresDataTable cln = ((ScoresDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ScoresDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTimestamp = base.Columns["Timestamp"];
                this.columnSensorId = base.Columns["SensorId"];
                this.columnGameNumber = base.Columns["GameNumber"];
                this.columnRoundNumber = base.Columns["RoundNumber"];
                this.columnElapsedTime = base.Columns["ElapsedTime"];
                this.columnName = base.Columns["Name"];
                this.columnRequiredLevel = base.Columns["RequiredLevel"];
                this.columnImpactLevel = base.Columns["ImpactLevel"];
                this.columnPoints = base.Columns["Points"];
                this.columnNewScore = base.Columns["NewScore"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTimestamp = new global::System.Data.DataColumn("Timestamp", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimestamp);
                this.columnSensorId = new global::System.Data.DataColumn("SensorId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSensorId);
                this.columnGameNumber = new global::System.Data.DataColumn("GameNumber", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGameNumber);
                this.columnRoundNumber = new global::System.Data.DataColumn("RoundNumber", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoundNumber);
                this.columnElapsedTime = new global::System.Data.DataColumn("ElapsedTime", typeof(global::System.TimeSpan), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnElapsedTime);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRequiredLevel = new global::System.Data.DataColumn("RequiredLevel", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequiredLevel);
                this.columnImpactLevel = new global::System.Data.DataColumn("ImpactLevel", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpactLevel);
                this.columnPoints = new global::System.Data.DataColumn("Points", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPoints);
                this.columnNewScore = new global::System.Data.DataColumn("NewScore", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewScore);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnTimestamp.AllowDBNull = false;
                this.columnSensorId.AllowDBNull = false;
                this.columnGameNumber.AllowDBNull = false;
                this.columnRoundNumber.AllowDBNull = false;
                this.columnElapsedTime.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnRequiredLevel.AllowDBNull = false;
                this.columnImpactLevel.AllowDBNull = false;
                this.columnPoints.AllowDBNull = false;
                this.columnNewScore.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScoresRow NewScoresRow() {
                return ((ScoresRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ScoresRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ScoresRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScoresRowChanged != null)) {
                    this.ScoresRowChanged(this, new ScoresRowChangeEvent(((ScoresRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScoresRowChanging != null)) {
                    this.ScoresRowChanging(this, new ScoresRowChangeEvent(((ScoresRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScoresRowDeleted != null)) {
                    this.ScoresRowDeleted(this, new ScoresRowChangeEvent(((ScoresRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScoresRowDeleting != null)) {
                    this.ScoresRowDeleting(this, new ScoresRowChangeEvent(((ScoresRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScoresRow(ScoresRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataLogModel ds = new DataLogModel();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScoresDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ImpactsRow : global::System.Data.DataRow {
            
            private ImpactsDataTable tableImpacts;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImpactsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableImpacts = ((ImpactsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableImpacts.IDColumn]));
                }
                set {
                    this[this.tableImpacts.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Timestamp {
                get {
                    return ((global::System.DateTime)(this[this.tableImpacts.TimestampColumn]));
                }
                set {
                    this[this.tableImpacts.TimestampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SensorId {
                get {
                    return ((string)(this[this.tableImpacts.SensorIdColumn]));
                }
                set {
                    this[this.tableImpacts.SensorIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte GameNumber {
                get {
                    return ((byte)(this[this.tableImpacts.GameNumberColumn]));
                }
                set {
                    this[this.tableImpacts.GameNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte RoundNumber {
                get {
                    return ((byte)(this[this.tableImpacts.RoundNumberColumn]));
                }
                set {
                    this[this.tableImpacts.RoundNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.TimeSpan ElapsedTime {
                get {
                    return ((global::System.TimeSpan)(this[this.tableImpacts.ElapsedTimeColumn]));
                }
                set {
                    this[this.tableImpacts.ElapsedTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableImpacts.NameColumn]));
                }
                set {
                    this[this.tableImpacts.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataSource {
                get {
                    return ((string)(this[this.tableImpacts.DataSourceColumn]));
                }
                set {
                    this[this.tableImpacts.DataSourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte RequiredLevel {
                get {
                    return ((byte)(this[this.tableImpacts.RequiredLevelColumn]));
                }
                set {
                    this[this.tableImpacts.RequiredLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ImpactLevel {
                get {
                    return ((byte)(this[this.tableImpacts.ImpactLevelColumn]));
                }
                set {
                    this[this.tableImpacts.ImpactLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SensorPanel {
                get {
                    return ((string)(this[this.tableImpacts.SensorPanelColumn]));
                }
                set {
                    this[this.tableImpacts.SensorPanelColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ScoresRow : global::System.Data.DataRow {
            
            private ScoresDataTable tableScores;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScoresRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableScores = ((ScoresDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableScores.IDColumn]));
                }
                set {
                    this[this.tableScores.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Timestamp {
                get {
                    return ((global::System.DateTime)(this[this.tableScores.TimestampColumn]));
                }
                set {
                    this[this.tableScores.TimestampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SensorId {
                get {
                    return ((string)(this[this.tableScores.SensorIdColumn]));
                }
                set {
                    this[this.tableScores.SensorIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte GameNumber {
                get {
                    return ((byte)(this[this.tableScores.GameNumberColumn]));
                }
                set {
                    this[this.tableScores.GameNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte RoundNumber {
                get {
                    return ((byte)(this[this.tableScores.RoundNumberColumn]));
                }
                set {
                    this[this.tableScores.RoundNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.TimeSpan ElapsedTime {
                get {
                    return ((global::System.TimeSpan)(this[this.tableScores.ElapsedTimeColumn]));
                }
                set {
                    this[this.tableScores.ElapsedTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableScores.NameColumn]));
                }
                set {
                    this[this.tableScores.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte RequiredLevel {
                get {
                    return ((byte)(this[this.tableScores.RequiredLevelColumn]));
                }
                set {
                    this[this.tableScores.RequiredLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ImpactLevel {
                get {
                    return ((byte)(this[this.tableScores.ImpactLevelColumn]));
                }
                set {
                    this[this.tableScores.ImpactLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Points {
                get {
                    return ((int)(this[this.tableScores.PointsColumn]));
                }
                set {
                    this[this.tableScores.PointsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint NewScore {
                get {
                    return ((uint)(this[this.tableScores.NewScoreColumn]));
                }
                set {
                    this[this.tableScores.NewScoreColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ImpactsRowChangeEvent : global::System.EventArgs {
            
            private ImpactsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImpactsRowChangeEvent(ImpactsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImpactsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ScoresRowChangeEvent : global::System.EventArgs {
            
            private ScoresRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScoresRowChangeEvent(ScoresRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScoresRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591